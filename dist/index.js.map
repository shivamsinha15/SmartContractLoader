{"version":3,"sources":["../src/index.js"],"names":["require","config","CAMPAIGN_LOAD_ABIS","Set","module","exports","ContractManager"],"mappings":";;AAEA;;;;AAFAA,OAAO,CAAC,aAAD,CAAP,CAAuBC,MAAvB;;AAII,IAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAC/B,eAD+B,EAE/B,cAF+B,EAG/B,qBAH+B,EAI/B,kBAJ+B,EAK/B,iBAL+B,EAM/B,iBAN+B,EAO/B,cAP+B,EAQ/B,UAR+B,CAAR,CAA3B;AAYJ;;;;;;;;;;;;;;AAeAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,eAAe,EAAfA;AADa,CAAjB","sourcesContent":["require('dotenv-flow').config();\n\nimport ContractManager from './ContractManager';\n\n    const CAMPAIGN_LOAD_ABIS = new Set([\n        \"CampaignTrust\",\n        \"PollingBooth\",\n        \"DistributionFactory\",\n        \"CampaignRegistry\",\n        \"CampaignManager\",\n        \"KingTokenERC667\",\n        \"TestContract\",\n        \"RealMath\"\n    ]);\n\n\n/* \nconst test = async () => {\n    \n    try{\n        let contractManager = new ContractManager(process.env.CONTRACTS_PATH, process.env.PRIVATE_KEY, process.env.BLOCKCHAIN_URL, process.env.NETWORK_ID);\n        let instances = contractManager.getContractsInstances(CAMPAIGN_LOAD_ABIS);\n        console.log( await instances.CampaignManager.rewardToken());\n    } catch (e){\n        console.error(e);\n    }\n}\n\ntest(); */\n \n \nmodule.exports = {\n    ContractManager\n}"],"file":"index.js"}
{"version":3,"sources":["../src/ContractManager.js"],"names":["ethers","require","abiDecoder","ContractManager","contractsPath","privateKey","blockchainURL","networkId","INSTANCES","provider","providers","JsonRpcProvider","wallet","Wallet","contracts","dirname","contractToLoad","forEach","x","getContractInstance","addABI","abi","name","address","contractDetails","networks","contract","Contract","eventName","txReceipt","event","decoded","decodeLogs","logs","find","e","events","reducedEvent","reduce","acc","current","newObj","value","Object","assign","console","log","hasOwnProperty","error"],"mappings":";;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;IAEqBE,e;;;AAEjB,2BAAYC,aAAZ,EAA0BC,UAA1B,EAAqCC,aAArC,EAAmDC,SAAnD,EAA8D;AAAA;;AAC1D,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKJ,aAAL,GAAqBA,aAArB;AACA,SAAKG,SAAL,GAAiBA,SAAjB;AACA,SAAKE,QAAL,GAAgB,IAAIT,MAAM,CAACU,SAAP,CAAiBC,eAArB,CAAqCL,aAArC,CAAhB;AACA,SAAKM,MAAL,GAAc,IAAIZ,MAAM,CAACa,MAAX,CAAkBR,UAAlB,EAA8B,KAAKI,QAAnC,CAAd;AACA,SAAKK,SAAL,GAAiBb,OAAO,CAAC,aAAD,CAAP,CAAuB;AACpCc,MAAAA,OAAO,EAAQX;AADqB,KAAvB,CAAjB;AAGH;;;;0CAEqBY,c,EAAgB;AAAA;;AAClCA,MAAAA,cAAc,CAACC,OAAf,CAAwB,UAAAC,CAAC,EAAI;AAAI,QAAA,KAAI,CAACV,SAAL,CAAeU,CAAf,IAAoB,KAAI,CAACC,mBAAL,CAAyBD,CAAzB,CAApB;AAAkD,OAAnF;AACAF,MAAAA,cAAc,CAACC,OAAf,CAAwB,UAAAC,CAAC;AAAA,eAAKhB,UAAU,CAACkB,MAAX,CAAkB,KAAI,CAACN,SAAL,CAAeI,CAAf,EAAkBG,GAApC,CAAL;AAAA,OAAzB;AACA,aAAO,KAAKb,SAAZ;AACH;;;wCAEmBc,I,EAAKC,O,EAAS;AAC9B,UAAIC,eAAe,GAAG,KAAKV,SAAL,CAAeQ,IAAf,CAAtB;;AACC,UAAG,CAACC,OAAJ,EAAY;AACTA,QAAAA,OAAO,GAAGC,eAAe,CAACC,QAAhB,CAAyB,KAAKlB,SAA9B,EAAyCgB,OAAnD;AACH;;AACD,UAAIG,QAAQ,GAAG,IAAI1B,MAAM,CAAC2B,QAAX,CAAoBJ,OAApB,EAA6BC,eAAe,CAACH,GAA7C,EAAkD,KAAKT,MAAvD,CAAf;AACA,aAAOc,QAAP;AACH;;;mCAEc;AACX,aAAO,KAAKZ,SAAZ;AACH;;;+BAEWc,S,EAAWC,S,EAAW;AAC9B,UAAIC,KAAJ;AACA,UAAIC,OAAO,GAAI7B,UAAU,CAAC8B,UAAX,CAAsBH,SAAS,CAACI,IAAhC,CAAD,CACTC,IADS,CACJ,UAAAC,CAAC;AAAA,eAAKA,CAAC,CAACb,IAAF,IAAUM,SAAV,IAAuBO,CAAC,CAACb,IAAF,IAAU,UAAtC;AAAA,OADG,CAAd;;AAEA,UAAGS,OAAH,EAAW;AACPD,QAAAA,KAAK,GAAGC,OAAO,CAACK,MAAhB;AAEA,YAAIC,YAAY,GAAGP,KAAK,CAACQ,MAAN,CAAa,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAClD,cAAIC,MAAM,GAAG,EAAb;AACAA,UAAAA,MAAM,CAACD,OAAO,CAAClB,IAAT,CAAN,GAAuBkB,OAAO,CAACE,KAA/B;AACA,iBAAOC,MAAM,CAACC,MAAP,CAAcL,GAAd,EAAmBE,MAAnB,CAAP;AACC,SAJkB,EAIhB,EAJgB,CAAnB;AAKAI,QAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ;;AAEA,YAAGA,YAAY,CAACU,cAAb,CAA4B,OAA5B,CAAH,EAAwC;AACxC,gBAAOV,YAAY,CAACW,KAApB;AACC;;AACD,eAAOX,YAAP;AACH;;AAED,aAAOP,KAAP;AACH","sourcesContent":["const ethers = require('ethers');\nconst abiDecoder = require('abi-decoder');\n\nexport default class ContractManager {\n    \n    constructor(contractsPath,privateKey,blockchainURL,networkId) {\n        this.INSTANCES = {};\n        this.contractsPath = contractsPath;\n        this.networkId = networkId\n        this.provider = new ethers.providers.JsonRpcProvider(blockchainURL)\n        this.wallet = new ethers.Wallet(privateKey, this.provider);\n        this.contracts = require('require-all')({\n            dirname     :  contractsPath\n          });\n    }\n\n    getContractsInstances(contractToLoad) {\n        contractToLoad.forEach( x => {   this.INSTANCES[x] = this.getContractInstance(x); });\n        contractToLoad.forEach( x =>  abiDecoder.addABI(this.contracts[x].abi) );\n        return this.INSTANCES;\n    }\n\n    getContractInstance(name,address) {\n        let contractDetails = this.contracts[name];\n         if(!address){\n            address = contractDetails.networks[this.networkId].address;\n        }\n        let contract = new ethers.Contract(address, contractDetails.abi, this.wallet);\n        return contract;  \n    }\n\n    getContracts() {\n        return this.contracts;\n    }\n\n    decodeLogs (eventName, txReceipt) {\n        let event;\n        let decoded = (abiDecoder.decodeLogs(txReceipt.logs))\n            .find(e => (e.name == eventName || e.name == \"ErrorLog\"))\n        if(decoded){\n            event = decoded.events;\n            \n            let reducedEvent = event.reduce((acc, current) => {\n            let newObj = {};\n            newObj[current.name] = current.value;\n            return Object.assign(acc, newObj)\n            }, {});\n            console.log(reducedEvent);\n        \n            if(reducedEvent.hasOwnProperty('error')){\n            throw  reducedEvent.error\n            }\n            return reducedEvent;    \n        }\n        \n        return event;\n    }\n    \n    \n}\n\n"],"file":"ContractManager.js"}